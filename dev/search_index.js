var documenterSearchIndex = {"docs":
[{"location":"#DataFrameTools.jl-Documentation","page":"DataFrameTools.jl Documentation","title":"DataFrameTools.jl Documentation","text":"","category":"section"},{"location":"","page":"DataFrameTools.jl Documentation","title":"DataFrameTools.jl Documentation","text":"","category":"page"},{"location":"#Functions","page":"DataFrameTools.jl Documentation","title":"Functions","text":"","category":"section"},{"location":"","page":"DataFrameTools.jl Documentation","title":"DataFrameTools.jl Documentation","text":"file_format","category":"page"},{"location":"#DataFrameTools.file_format","page":"DataFrameTools.jl Documentation","title":"DataFrameTools.file_format","text":"file_format(file::AbstractString)::Symbol\n\nReturns the file format from the file suffix.\n\nArguments\n\nfile::AbstractString: file path\n\n\n\n\n\n","category":"function"},{"location":"","page":"DataFrameTools.jl Documentation","title":"DataFrameTools.jl Documentation","text":"compression_formats","category":"page"},{"location":"#DataFrameTools.compression_formats","page":"DataFrameTools.jl Documentation","title":"DataFrameTools.compression_formats","text":"compression_formats()::Vector{Symbol}\n\nReturns the file formats supported for compressed archives.\n\n\n\n\n\n","category":"function"},{"location":"","page":"DataFrameTools.jl Documentation","title":"DataFrameTools.jl Documentation","text":"compress","category":"page"},{"location":"#DataFrameTools.compress","page":"DataFrameTools.jl Documentation","title":"DataFrameTools.compress","text":"compress(f::Function, file::AbstractString, subfile::AbstractString)\n\nCreates a compressed file.  The type of compression is inferred from the output file name.  subfile is the name of the file within the compressed archive.  f is a function which writes to the archive.\n\nThe typical use case is:\n\ncompress(file, subfile) do io\n    # put here the body of function f(io) to write to io\nend\n\nArguments\n\nf::Function: function to execute on the file contents\nfile::AbstractString: compressed file path\nsubfile::AbstractString: subfile within the archive\n\n\n\n\n\n","category":"function"},{"location":"","page":"DataFrameTools.jl Documentation","title":"DataFrameTools.jl Documentation","text":"uncompress","category":"page"},{"location":"#DataFrameTools.uncompress","page":"DataFrameTools.jl Documentation","title":"DataFrameTools.uncompress","text":"uncompress(f::Function, file::AbstractString)\n\nUncompresses a compressed file.  The type of compression is inferred from the output file name.  f is a function which reads from the archive.\n\nThe typical use case is:\n\nuncompress(file) do io\n    # put here the body of function f(io) to write to io\nend\n\nArguments\n\nf::Function: function to execute on the file contents\nfile::AbstractString: file path    \n\n\n\n\n\n","category":"function"},{"location":"","page":"DataFrameTools.jl Documentation","title":"DataFrameTools.jl Documentation","text":"df_formats","category":"page"},{"location":"#DataFrameTools.df_formats","page":"DataFrameTools.jl Documentation","title":"DataFrameTools.df_formats","text":"df_formats()::Vector{Symbol}\n\nReturns the file formats supported for DataFrames.\n\n\n\n\n\n","category":"function"},{"location":"","page":"DataFrameTools.jl Documentation","title":"DataFrameTools.jl Documentation","text":"df_write","category":"page"},{"location":"#DataFrameTools.df_write","page":"DataFrameTools.jl Documentation","title":"DataFrameTools.df_write","text":"df_write(file::AbstractString, df::DataFrame; subformat::Union{Nothing,Symbol}=nothing, dictencode::Bool=true)\n\nWrites a DataFrame to a file.  The file suffix determines how the DataFrame is serialized. If the file has a compressed suffix, subformat determines how the DataFrame is serialized in the compressed archive.\n\nArguments\n\nfile::AbstractString: file path    \ndf::DataFrame: dataframe to export\nsubformat::Union{Nothing,Symbol}=nothing: format to used within a compressed archive.\ndictencode::Bool=true: true to use a dictionary encoding, if possible, and false otherwise.\n\n\n\n\n\n","category":"function"},{"location":"","page":"DataFrameTools.jl Documentation","title":"DataFrameTools.jl Documentation","text":"df_read","category":"page"},{"location":"#DataFrameTools.df_read","page":"DataFrameTools.jl Documentation","title":"DataFrameTools.df_read","text":"df_read(file::AbstractString; dates_as_strings::Bool=true, missing_type::Type=String, missing_types::Dict{String,Type}=Dict{String,Type}())::DataFrame\n\nReads a DataFrame from a file.  The file suffix determines how the DataFrame is deserialized.\n\nArguments\n\nfile::AbstractString: file path    \ndates_as_strings::Bool=true: true to parse dates as strings; false to parse dates as dates. \nmissing_type::Type=String: type to use if all values are missing, \nmissing_types::Dict{String,Type}=Dict{String,Type}(): type to use for missing columns\n\n\n\n\n\n","category":"function"},{"location":"#Index","page":"DataFrameTools.jl Documentation","title":"Index","text":"","category":"section"},{"location":"","page":"DataFrameTools.jl Documentation","title":"DataFrameTools.jl Documentation","text":"","category":"page"}]
}
